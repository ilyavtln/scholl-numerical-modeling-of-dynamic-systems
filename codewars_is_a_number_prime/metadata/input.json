{
  "success" : true,
  "languageName" : "python",
  "label" : "Python",
  "solutionId" : "652d61f1f487b20bfa550df6",
  "icon" : "python",
  "setup" : "def is_prime(num):\n  pass #TODO",
  "exampleFixture" : "import codewars_test as test\n@test.describe(\"Basic\")\ndef basic():\n    \n    @test.it(\"Basic tests\")\n    def basic_tests():\n        test.assert_equals(is_prime(0),  False, \"0  is not prime\")\n        test.assert_equals(is_prime(1),  False, \"1  is not prime\")\n        test.assert_equals(is_prime(2),  True, \"2  is prime\")\n        test.assert_equals(is_prime(73), True, \"73 is prime\")\n        test.assert_equals(is_prime(75), False, \"75 is not prime\")\n        test.assert_equals(is_prime(-1), False, \"-1 is not prime\")\n\n    \n    @test.it(\"Test prime\")\n    def test_prime():\n        test.assert_equals(is_prime(3),  True, \"3  is prime\");\n        test.assert_equals(is_prime(5),  True, \"5  is prime\");\n        test.assert_equals(is_prime(7),  True, \"7  is prime\");\n        test.assert_equals(is_prime(41), True, \"41 is prime\");\n        test.assert_equals(is_prime(5099), True, \"5099 is prime\");\n        \n    @test.it(\"Test not prime\")\n    def test_not_prime():\n        test.assert_equals(is_prime(4),  False, \"4  is not prime\");\n        test.assert_equals(is_prime(6),  False, \"6  is not prime\");\n        test.assert_equals(is_prime(8),  False, \"8  is not prime\");\n        test.assert_equals(is_prime(9), False, \"9 is not prime\");\n        test.assert_equals(is_prime(45), False, \"45 is not prime\");\n        test.assert_equals(is_prime(-5), False, \"-5 is not prime\");\n        test.assert_equals(is_prime(-8), False, \"-8 is not prime\");\n        test.assert_equals(is_prime(-41), False, \"-41 is not prime\");\n",
  "workingCode" : null,
  "workingFixture" : null,
  "recentlyAttempted" : null,
  "activeVersion" : "3.11",
  "languageVersions" : [ {
    "id" : "3.8",
    "label" : "3.8",
    "supported" : true
  }, {
    "id" : "3.10",
    "label" : "3.10",
    "supported" : true
  }, {
    "id" : "3.11",
    "label" : "3.11",
    "supported" : true
  } ],
  "testFramework" : "cw-2",
  "path" : "/projects/652d61f08462b21225a063ee/",
  "fixture" : "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\nYScOpBqUcs3e\n--M189Frba+HP07dBgOdGf9g==--u",
  "package" : ""
}