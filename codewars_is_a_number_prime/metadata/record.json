{
  "id" : "5262119038c0985a5b00029f",
  "name" : "Is a number prime?",
  "slug" : "is-a-number-prime",
  "url" : "https://www.codewars.com/kata/5262119038c0985a5b00029f",
  "category" : "algorithms",
  "languages" : [ "javascript", "python", "ruby", "haskell", "r", "csharp", "php", "cpp", "nasm", "java", "c", "rust", "cobol", "pascal", "lambdacalc", "go", "perl", "d" ],
  "path" : "/projects/652d61f08462b21225a063ee/",
  "selectedLanguage" : "python",
  "description" : "Define a function that takes an integer argument and returns a logical value `true` or `false` depending on if the integer is a prime.\n\nPer Wikipedia, a prime number ( or a prime ) is a natural number greater than `1` that has no positive divisors other than `1` and itself.\n\n## Requirements\n\n* You can assume you will be given an integer input.\n* You can not assume that the integer will be only positive. You may be given negative numbers as well ( or `0` ).\n* **NOTE on performance**: There are no fancy optimizations required, but still _the_ most trivial solutions might time out. Numbers go up to 2^31 ( or similar, depending on language ). Looping all the way up to `n`, or `n/2`, will be too slow.\n\n## Example\n\n```c\nis_prime(1)  /* false */\nis_prime(2)  /* true  */\nis_prime(-1) /* false */\n```\n```nasm    \nmov edi, 1\ncall is_prime    ; EAX <- 0 (false)\n\nmov edi, 2\ncall is_prime    ; EAX <- 1 (true)\n\nmov edi, -1\ncall is_prime    ; EAX <- 0 (false)\n```\n```c++\nbool isPrime(5) = return true\n```\n```d\nbool isPrime(5) = return true\n```\n```pascal\nIsPrime(1) = false\nIsPrime(2) = true\nIsPrime(-1) = false\n```\n```perl\nis_prime(1)  # 0\nis_prime(2)  # 1\nis_prime(-1) # 0\n```\n```lambdacalc\nis-prime 1 -> False\nis-prime 2 -> True\n```\n\n~~~if:lambdacalc\n## Encodings\n\npurity: `LetRec`  \nnumEncoding: `BinaryScott` ( so, no negative numbers )  \nexport deconstructor `if` for your `Boolean` encoding  \n~~~\n",
  "rank" : {
    "id" : -6,
    "name" : "6 kyu",
    "color" : "yellow"
  },
  "tags" : [ "Mathematics", "Algorithms" ],
  "workUrl" : "https://www.codewars.com/kata/5262119038c0985a5b00029f/train/python",
  "completed" : false
}